---
title: Model Monitoring with ShinyLive
format: html
author: James H Wade
date: 2023-01-10
draft: true
filters:
  - shinylive
---

This is a Shinylive application embedded in a Quarto doc.

```{shinylive-python}
#| standalone: true
#| viewerHeight: 600

from shiny import *

# Set the API endpoint URL
from js import XMLHttpRequest, Blob
import json
url = "http://penguin.eastus.azurecontainer.io:8000/predict"


data = {"a": 1}

app_ui = ui.page_fluid(
    # title = "Predicting Penguin Sex",
    ui.layout_sidebar(
    ui.panel_sidebar(
    ui.input_select("species", "Penguin Species",
                    {"Gentoo":"Gentoo", "Chinstrap":"Chinstrap", "Adelie":"Adelie"}),
    ui.input_slider("bill_length_mm", "Bill Length (mm)",
                    min=30, max=60, value=45, step=0.5, width="100%"),
    ui.input_slider("bill_depth_mm", "Bill Depth (mm)",
                    min=10, max=22, value=15, step=0.5, width="100%"),
    ui.input_slider("flipper_length_mm", "Flipper Length (mm)",
                    min=170, max=235, value=200, step = 1, width="100%"),
    ui.input_slider("body_mass_g","Body Mass (g)",
                    min=2700, max=6300, value=3500, step=10, width="100%"),
    ui.input_action_button("go", "Predict", width="100%")
    ),
    ui.panel_main(ui.output_text("txt"))
    )
)

def server(input, output, session):
    @output
    @render.text
    @reactive.event(input.go)
    def txt():
       payload = [{"species":"Adelie","bill_length_mm":0.5,"bill_depth_mm":0.5,"flipper_length_mm":0,"body_mass_g":0}]
       req = XMLHttpRequest.new()
       req.open("POST", url, False)
       blob = Blob.new([json.dumps(payload)], {type : 'application/json'})
       req.send(blob)
       str(req.response)
       return f"A test piece of {req.response}." 
  
app = App(app_ui, server)

```